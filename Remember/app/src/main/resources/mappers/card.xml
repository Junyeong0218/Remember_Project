<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.remember.app.entity.card.CardRepository">

	    <select id="getCardDetail" parameterType="Integer" resultType="com.remember.app.entity.card.CardDetail">
			 SELECT
				cm.*,
				
				image.id as card_image_id,
				image.card_image,
				image.is_front,
				
				cbg.group_id,
				cgm.group_name,
				
				memo.id as memo_id,
				memo.user_id as memo_user_id,
				memo.`contents`,
				memo.create_date as memo_create_date,
				memo.update_date as memo_update_date
			FROM 
				card_mst cm
				left outer join card_image image on(image.card_id = cm.id)
				left outer join card_belong_group cbg on(cbg.card_id = cm.id)
				left outer join card_group_mst cgm on(cgm.id = cbg.group_id)
				left outer join card_memo memo on(memo.card_id = cm.id)
			WHERE
				cm.id = #{card_id};
		</select>
	  
		<insert id="insertCard" parameterType="com.remember.app.entity.card.Card">
		  	insert into
		  		card_mst
		  	values(
		  		0,
		  		#{user_id},
		  		#{name},
		  		#{profile_img},
		  		#{phone},
		  		#{email},
		  		#{company_name},
		  		#{department_name},
		  		#{position_name},
		  		#{landline_phone},
		  		#{fax},
		  		#{address},
		  		#{sub_address},
		  		now(),
		  		now()
		  	);
		  	<selectKey keyProperty="id" resultType="Integer" order="AFTER">
		  		select id from card_mst where user_id = #{user_id} and name = #{name} order by create_date desc limit 1;
		  	</selectKey>
	
		</insert>
	  
		<update id="updateCard" parameterType="com.remember.app.entity.card.Card">
		  	update
		  		card_mst
		  	set
		  		name = #{name},
		  		profile_img = #{profile_img},
		  		phone = #{phone},
		  		email = #{email},
		  		company_name = #{company_name},
		  		department_name = #{department_name},
		  		position_name = #{position_name},
		  		landline_phone = #{landline_phone},
		  		fax = #{fax},
		  		address = #{address},
		  		sub_address = #{sub_address},
		  		update_date = now()
		  	where
		  		id = #{id};
		</update>
	  
		<delete id="deleteCard" parameterType="Integer">
		  	delete
		  	from
		  		card_mst
		  	where
		  		id = #{cardId};
		</delete>
	  
		<delete id="deleteCards" parameterType="com.remember.app.requestDto.CardDeleteReqDto">
		delete from
			card_mst
		where
			id in(
	  		<foreach collection="card_id_list" item="item" index="index" separator=",">
	  			#{item}
	  		</foreach>
			);
		</delete>
		
		<select id="getCardImageId" parameterType="Integer" resultType="Integer">
			select
				id
			from
				card_image
			where
				card_id = #{cardId} and is_front = #{is_front};
		</select>
		
		<insert id="insertCardImage" parameterType="com.remember.app.entity.card.CardImage">
			insert into
				card_image
			values(
				0,
				#{card_id},
				#{card_image},
				#{is_front},
				now(),
				now()
			);
		</insert>
		
		<update id="updateCardImage" parameterType="com.remember.app.entity.card.CardImage">
			update
				card_image
			set
				card_image = #{card_image},
				update_date = now()
			where
				id = #{id};
		</update>
	  
		<insert id="insertGroup" parameterType="com.remember.app.entity.card.Group">
		  	insert into
		  		card_group_mst
		  	values(
		  		0,
		  		#{user_id},
		  		#{group_name},
		  		now(),
		  		now()
		  	);
		  	
		  	<selectKey keyProperty="id" resultType="Integer" order="AFTER">
		  		select id from card_group_mst where user_id = #{user_id} and group_name = #{group_name};
		  	</selectKey>
		</insert>
	  
		<select id="getGroup" parameterType="Integer" resultType="com.remember.app.entity.card.GroupSummary">
		  	SELECT 
				cgm.id,
				cgm.group_name,
				COUNT(DISTINCT cbg.id) AS card_count,
				COUNT(DISTINCT cbg2.card_id) AS total_count
			FROM 
				card_group_mst cgm
				LEFT OUTER JOIN card_belong_group cbg ON(cbg.group_id = cgm.id)
				LEFT OUTER JOIN card_group_mst cgm2 ON(cgm2.user_id=#{user_id})
				LEFT OUTER JOIN card_belong_group cbg2 ON(cbg2.group_id = cgm2.id)
			WHERE
				cgm.user_id=#{user_id}
			GROUP BY
				cgm.id
			order by
				cgm.create_date desc;
		</select>
	  
		<update id="updateGroup" parameterType="com.remember.app.entity.card.Group">
		  	update
		  		card_group_mst
		  	set
		  		group_name = #{group_name},
		  		update_date = now()
		  	where
		  		id = #{id};
		</update>
	  
		<delete id="deleteGroup" parameterType="com.remember.app.entity.card.Group">
		  	delete
		  	from
		  		card_group_mst
		  	where
		  		id =#{id};
		</delete>
	  
		<select id="getUserCard" parameterType="Integer" resultType="com.remember.app.entity.card.Card">
		  	select
		  		*
		  	from
		  		card_mst
		  	where
		  		id = #{id};
		</select>
	  
		<delete id="deleteCardBelongGroups" parameterType="Integer">
			delete from
				card_belong_group
			where
				card_id = #{cardId};
		</delete>
		
		<insert id="insertCardBelongGroups" parameterType="com.remember.app.requestDto.UpdateCardsBelongGroupsReqDto">
			insert into
				card_belong_group
			values
			<foreach collection="group_id_list" index="index" item="item" separator=",">
				(
					0,
					#{item},
					#{cardId},
					now(),
					now()
				)
			</foreach>
			;
		</insert>
		
		<insert id="insertCardBelongGroupsForMultiple" parameterType="com.remember.app.requestDto.UpdateAllCardsBelongGroupsReqDto">
			insert into
				card_belong_group
			values
			<foreach collection="group_id_list" index="index" item="item" separator=",">
				(
					0,
					#{item},
					#{cardId},
					now(),
					now()
				)
			</foreach>
			;
		</insert>
		
		<insert id="insertCardBelongDefaultGroup" parameterType="Integer">
			insert into
				card_belong_group
			values(
				0,
				#{defaultCardGroupId},
				#{cardId},
				now(),
				now()
			);
		</insert>
		
		<select id="getAllCardIdList" parameterType="Integer" resultType="Integer">
			select
				card.id
			from
				card_mst
			where
				user_id = #{userId};
		</select>
		
		<select id="getAllCardIdListInGroup" parameterType="Integer" resultType="Integer">
			select
				id
			from
				card_belong_group belong
				left outer join card_mst card on(card.id = belong.card_id)
			where
				belong.group_id = #{groupId};
		</select>
	  
		<select id="getCardSummaryList" parameterType="Integer" resultType="com.remember.app.entity.card.Card">
		  	select
		  		card.id,
		  		card.`name`,
		  		card.company_name,
		  		card.department_name,
		  		card.position_name,
		  		card.create_date,
		  		
		  		count(distinct card2.id) as total_count
		  	from
		  		card_group_mst `group`
		  		left outer join card_belong_group belong on(belong.group_id = `group`.id)
		  		left outer join card_mst card on(card.id=belong.card_id)
		  		left outer join card_mst card2 on(card2.user_id = #{user_id})
		  	where
		  		`group`.user_id = #{user_id} and
		  		belong.id is not null
		  	group by
		  		belong.card_id
		  	order by
		  		card.create_date desc,
		  		card.id desc
		  	limit #{page}, 10;
		</select>
		
		<select id="getCardSummaryListOrderNameAsc" parameterType="Integer" resultType="com.remember.app.entity.card.Card">
		  	select
		  		card.id,
		  		card.`name`,
		  		card.company_name,
		  		card.department_name,
		  		card.position_name,
		  		card.create_date,
		  		
		  		count(distinct card2.id) as total_count
		  	from
		  		card_group_mst `group`
		  		left outer join card_belong_group belong on(belong.group_id = `group`.id)
		  		left outer join card_mst card on(card.id=belong.card_id)
		  		left outer join card_mst card2 on(card2.user_id = #{user_id})
		  	where
		  		`group`.user_id = #{user_id} and
		  		belong.id is not null
		  	group by
		  		belong.card_id
		  	order by
		  		card.`name` asc,
		  		card.id desc
		  	limit #{page}, 10;
		</select>
		
		<select id="getCardSummaryListOrderCompanyAsc" parameterType="Integer" resultType="com.remember.app.entity.card.Card">
		  	select
		  		card.id,
		  		card.`name`,
		  		card.company_name,
		  		card.department_name,
		  		card.position_name,
		  		card.create_date,
		  		
		  		count(distinct card2.id) as total_count
		  	from
		  		card_group_mst `group`
		  		left outer join card_belong_group belong on(belong.group_id = `group`.id)
		  		left outer join card_mst card on(card.id=belong.card_id)
		  		left outer join card_mst card2 on(card2.user_id = #{user_id})
		  	where
		  		`group`.user_id = #{user_id} and
		  		belong.id is not null
		  	group by
		  		belong.card_id
		  	order by
		  		card.company_name is null asc,
		  		card.company_name asc,
		  		card.id desc
		  	limit #{page}, 10;
		</select>
		
		<select id="getCardSummaryListInSpecificGroup" parameterType="Integer" resultType="com.remember.app.entity.card.Card">
		  	select
		  		card.id,
		  		card.`name`,
		  		card.company_name,
		  		card.department_name,
		  		card.position_name,
		  		card.create_date,
		  		
		  		count(distinct card.id) as total_count
		  	from
		  		card_group_mst `group`
		  		left outer join card_belong_group belong on(belong.group_id = `group`.id)
		  		left outer join card_mst card on(card.id = belong.card_id)
		  	where
		  		`group`.id = #{group_id} and
		  		belong.id is not null
		  	group by
		  		belong.card_id
		  	order by
		  		card.create_date desc,
		  		card.id desc
		  	limit #{page}, 10;
		</select>
		
		<select id="getCardSummaryListInSpecificGroupOrderNameAsc" parameterType="Integer" resultType="com.remember.app.entity.card.Card">
		  	select
		  		card.id,
		  		card.`name`,
		  		card.company_name,
		  		card.department_name,
		  		card.position_name,
		  		card.create_date,
		  		
		  		count(distinct card.id) as total_count
		  	from
		  		card_group_mst `group`
		  		left outer join card_belong_group belong on(belong.group_id = `group`.id)
		  		left outer join card_mst card on(card.id=belong.card_id)
		  	where
		  		`group`.id = #{group_id} and
		  		belong.id is not null
		  	group by
		  		belong.card_id
		  	order by
		  		card.`name` asc,
		  		card.id desc
		  	limit #{page}, 10;
		</select>
		
		<select id="getCardSummaryListInSpecificGroupOrderCompanyAsc" parameterType="Integer" resultType="com.remember.app.entity.card.Card">
		  	select
		  		card.id,
		  		card.`name`,
		  		card.company_name,
		  		card.department_name,
		  		card.position_name,
		  		card.create_date,
		  		
		  		count(distinct card.id) as total_count
		  	from
		  		card_group_mst `group`
		  		left outer join card_belong_group belong on(belong.group_id = `group`.id)
		  		left outer join card_mst card on(card.id=belong.card_id)
		  	where
		  		`group`.id = #{group_id} and
		  		belong.id is not null
		  	group by
		  		belong.card_id
		  	order by
		  		card.company_name is null asc,
		  		card.company_name asc,
		  		card.id desc
		  	limit #{page}, 10;
		</select>
	  
		<insert id="insertCardMemo" parameterType="com.remember.app.entity.card.CardMemo">
		  	insert into
		  		card_memo
		  	values(
		  		0,
		  		#{card_id},
		  		#{user_id},
		  		#{contents},
		  		now(),
		  		now()
		  	);
		</insert>
		
		<update id="updateCardMemo" parameterType="com.remember.app.entity.card.CardMemo">
			update
				card_memo
			set
				contents = #{contents}
			where
				id = #{id};
		</update>
		
		<delete id="deleteCardMemo" parameterType="Integer">
			delete
			from
				card_memo
			where
				id = #{cardMemoId};
		</delete>
  
		<insert id="insertTeam" parameterType="com.remember.app.entity.card.Team">
			insert into
				team_mst
			values(
				0,
				#{made_user_id},
				#{grade_id},
				#{title},
				null,
				now(),
				now(),
				false,
				null
			);
			
			<selectKey keyProperty="id" resultType="Integer" order="AFTER">
				select id from team_mst where made_user_id = #{made_user_id} order by create_date desc limit 1;
			</selectKey>
		</insert>
		
		<update id="updateTeamToDelete" parameterType="com.remember.app.entity.card.Team">
			update
				team_mst
			set
				deleted = true,
				deleted_date = now()
			where
				id = #{id} and made_user_id = #{made_user_id};
		</update>
		
		<insert id="joinTeam" parameterType="com.remember.app.entity.card.TeamJoinUser">
			insert into
				team_join_user
			values(
				0,
				#{team_id},
				#{joined_user_id},
				#{role},
				now(),
				now()
			);
		</insert>
		
		<delete id="leaveTeam" parameterType="com.remember.app.entity.card.TeamJoinUser">
			delete from
				team_join_user
			where
				team_id = #{team_id} and
				user_id = #{joined_user_id};
		</delete>
		
		<select id="getAdmincCountInTeam" parameterType="com.remember.app.entity.card.TeamJoinUser" resultType="Integer">
			select
				count(distinct id)
			from
				team_join_user
			where
				role = "ROLE" and
				team_id = #{team_id} and
				joined_user_id != #{joined_user_id};
		</select>

		<insert id="insertTeamCardBook" parameterType="com.remember.app.entity.card.TeamCardBook">
			insert into
				team_card_book
			values(
				0,
				#{team_id},
				#{card_book_name},
				now(),
				now()
			);
			
			
			<selectKey keyProperty="id" resultType="Integer" order="AFTER">
				select id from team_card_book where team_id = #{team_id} and card_book_name = #{card_book_name};
			</selectKey>
		</insert>
		
		<update id="updateTeamCardBookName" parameterType="com.remember.app.entity.card.TeamCardBook">
			update
				team_card_book
			set
				card_book_name = #{card_book_name},
				update_date = now()
			where
				id = #{id};
		</update>
		
		<insert id="insertTeamCardBookJoinUser" parameterType="com.remember.app.entity.card.TeamCardBookJoinUser">
			insert into
				team_card_book_join_user
			values(
				0,
				#{team_card_book_id},
				#{joined_user_id},
				#{role},
				now(),
				now()
			);
		</insert>
		
		<insert id="insertTeamUserProfile" parameterType="com.remember.app.entity.card.TeamUserProfile">
			insert into
				team_user_profile
			values(
				0,
				#{team_id},
				#{user_id},
				#{nickname},
				now(),
				now()
			);
		</insert>
		
		<select id="getUserJoinTeamFlag" parameterType="Integer" resultType="Integer">
			select
				count(distinct id)
			from
				team_join_user
			where
				joined_user_id = #{userId};
		</select>
		
		<select id="getTeamAndCardBooksWithJoinUser" parameterType="Integer" resultType="com.remember.app.entity.card.TeamAndCardBooks">
			select
				`join`.team_id,
				team.grade_id,
				grade.grade,
				grade.max_card_count,
				team.title,
				
				book.id as card_book_id,
				book.card_book_name,
				
				count(distinct belong.team_card_id) as card_count
			from
				team_join_user `join`
				left outer join team_mst team on(team.id = `join`.team_id)
				left outer join team_grade_mst grade on(grade.id = team.grade_id)
				left outer join team_card_book book on(book.team_id = team.id)
				left outer join team_card_book_join_user `join2` on(`join2`.team_card_book_id = book.id and `join2`.joined_user_id = #{userId})
				left outer join team_group `group` on(`group`.card_book_id = `join2`.team_card_book_id)
				left outer join team_card_belong_team_group belong on(belong.team_group_id = `group`.id)
			where
				`join`.joined_user_id = #{userId}
			group by
				book.id
			order by
				`join`.team_id asc;
		</select>
		
		<update id="updateProfileNickname" parameterType="com.remember.app.entity.card.TeamUserProfile">
			update
				team_user_profile
			set
				nickname = #{nickname},
				update_date = now()
			where
				id = #{id};
		</update>
  
		<insert id="insertTeamGroup" parameterType="com.remember.app.entity.card.TeamGroup">
			insert into
				team_group
			values(
				0,
				#{card_book_id},
				#{group_name},
				now(),
				now()
			);
		</insert>
		
		<update id="updateTeamGroup" parameterType="com.remember.app.entity.card.TeamGroup">
			update
				team_group
			set
				group_name = #{group_name}
			where
				id = #{id};
		</update>
		
		<delete id="deleteTeamGroup" parameterType="Integer">
			delete from
				team_group
			where
				id = #{groupId};
		</delete>
		
		<select id="getDefaultTeamGroupId" parameterType="Integer" resultType="Integer">
			select
				id
			from
				team_group
			where
				card_book_id = #{cardBookId} and
				group_name = "미분류";
		</select>
		
		<update id="updateTeamName" parameterType="com.remember.app.entity.card.Team">
			update
				team_mst
			set
				title = #{title},
				update_date = now()
			where
				id = #{id};
		</update>
		
		<select id="getProducts" parameterType="Integer" resultType="com.remember.app.entity.card.TeamProductDetail">
			select
				team.id as team_id,
				team.made_user_id,
				team.title,
				
				grade.id as grade_id,
				grade.grade,
				grade.name,
				grade.price,
				grade.memo_alert_flag,
				grade.card_map_flag,
				grade.extract_to_excel_flag,
				grade.show_sended_info_flag,
				grade.save_phone_flag,
				grade.user_permission_flag,
				grade.restore_card_flag,
				grade.open_api_flag,
				
				if(team.grade_id = grade.id, true, false) as is_using,
				if(count(distinct payment.id) > 0, false, true) as free_flag
			from
				team_mst team
				left outer join team_grade_mst grade on(true)
				left outer join product_payment_mst payment on(payment.team_id = team.id and payment.grade_id = 2)
			where
				team.id = #{teamId}
			group by
				grade.id; 
		</select>
		
		<select id="getInvitedTeam" parameterType="com.remember.app.entity.card.TeamDetail" resultType="com.remember.app.entity.card.TeamDetail">
			select
				team.*,
				profile.nickname as owner_nickname,
				
				count(distinct `join`.joined_user_id) as join_flag
			from
				team_mst team
				left outer join team_user_profile profile on(profile.team_id = team.id and profile.user_id = team.made_user_id)
				left outer join team_join_user `join` on(`join`.team_id = team.id and `join`.joined_user_id = #{invited_user_id})
			where
				team.invite_code = #{invite_code};
		</select>
		
		<select id="checkDuplicateInviteCode" parameterType="String" resultType="Integer">
			select
				count(invite_code)
			from
				team_mst
			where
				invite_code = #{inviteCode};
		</select>
		
		<update id="registerInviteCodeToTeam" parameterType="com.remember.app.entity.card.Team">
			update
				team_mst
			set
				invite_code = #{invite_code}
			where
				id = #{id};
		</update>
		
		<select id="getTeamUserProfile" parameterType="Integer" resultType="com.remember.app.entity.card.TeamUserProfile">
			select
				*
			from
				team_user_profile
			where
				user_id = #{userId};
		</select>
		
		<select id="getTeamList" parameterType="Integer" resultType="com.remember.app.entity.card.TeamDetail">
			select
				team.id,
				team.made_user_id,
				
				team.grade_id,
				grade.grade,
				grade.max_card_book_count,
				grade.max_card_count,
			
				team.title,	
				team.create_date,
				
				count(distinct `join2`.id) as total_join_user_count,
				count(distinct belong.team_card_id) as total_card_count
			from
				team_join_user `join`
				left outer join team_mst team on(team.id = `join`.team_id and team.deleted = false)
				left outer join team_grade_mst grade on(grade.id = team.grade_id)
				left outer join team_join_user `join2` on(`join2`.team_id = team.id)
				left outer join team_card_book card_book on(card_book.team_id = team.id)
				left outer join team_group `group` on(`group`.card_book_id = card_book.id)
				left outer join team_card_belong_team_group belong on(belong.team_group_id = `group`.id)
			where
				`join`.joined_user_id = #{userId}
			group by
				team.id;
		</select>
		
		<select id="getCardBookList" parameterType="Integer" resultType="com.remember.app.entity.card.TeamCardBookSummary">
			select
				book.id,
				book.team_id,
				book.card_book_name,
				count(distinct `join`.id) as join_count,
				count(distinct card.id) as card_count
			from
				team_card_book book
				left outer join team_card_book_join_user `join` on(`join`.team_card_book_id = book.id)
				left outer join team_group `group` on(`group`.card_book_id = book.id)
				left outer join team_card_belong_team_group belong on(belong.team_group_id = `group`.id)
				left outer join team_card_mst card on(card.id = belong.team_card_id and card.deleted = false)
			where
				book.team_id = #{teamId}
			group by
				book.id;
		</select>
		
		<select id="getCardBookIdList" parameterType="Integer" resultType="Integer">
			select
				id
			from
				team_card_book
			where
				team_id = #{teamId}
			order by
				create_date desc;
		</select>
		
		<select id="getTeamGroupList" parameterType="Integer" resultType="com.remember.app.entity.card.TeamGroupSummary">
			select
				`group`.*,
				count(distinct card.id) as card_count,
				count(distinct card2.id) as total_count
			from
				team_group `group`
				left outer join team_card_belong_team_group belong on(belong.team_group_id = `group`.id)
				left outer join team_card_mst card on(card.id = belong.team_card_id and card.deleted = false)
				left outer join team_card_belong_team_group belong2 on(belong2.team_group_id in (select id from team_group where card_book_id = #{cardBookId}))
				left outer join team_card_mst card2 on(card2.id = belong2.team_card_id and card2.deleted = false)
			where
				`group`.card_book_id = #{cardBookId}
			group by
				`group`.id,
				belong.team_group_id
			order by
				`group`.create_date desc;
		</select>
		
		<select id="getAllCardIdInTeamGroup" parameterType="Integer" resultType="Integer">
			select
				card.id
			from
				team_card_belong_team_group belong
				left outer join team_card_mst card on(card.id = belong.team_card_id and card.deleted = false)
			where
				belong.team_group_id = #{groupId};
		</select>
		
		<select id="getAllCardIdInTeamCardBook" parameterType="Integer" resultType="Integer">
			select 
				distinct card.id
			from
				team_card_book book
				left outer join team_group `group` on(`group`.card_book_id = book.id)
				left outer join team_card_belong_team_group belong on(belong.team_group_id = `group`.id)
				left outer join team_card_mst card on(card.id = belong.team_card_id and card.deleted = false)
			where
				book.id = #{cardBookId} and card.id is not null;
		</select>
		
		<select id="getAllCardListInCardBook" parameterType="Integer" resultType="com.remember.app.entity.card.Card">
			select
				card.id,
				card.`name`,
				card.company_name,
				card.department_name,
				card.position_name,
				card.create_date,
				
				count(distinct belong2.team_card_id) as total_count
			from
				team_group `group`
				left outer join team_card_belong_team_group belong on(belong.team_group_id = `group`.id)
				left outer join team_card_mst card on(card.id = belong.team_card_id and deleted = false)
				left outer join team_group `group2` on(`group2`.card_book_id = #{cardBookId})
				left outer join team_card_belong_team_group belong2 on(belong2.team_group_id = `group2`.id and belong2.team_card_id is not null)
			where
				`group`.card_book_id = #{cardBookId} and
				card.id is not null
			group by
				`group2`.card_book_id,
				card.id
			order by
				card.create_date desc,
				card.id desc
			limit #{page}, 10;
		</select>
		
		<select id="getAllCardListInCardBookOrderNameAsc" parameterType="Integer" resultType="com.remember.app.entity.card.Card">
			select
				card.id,
				card.`name`,
				card.company_name,
				card.department_name,
				card.position_name,
				card.create_date,
				
				count(distinct belong2.id) as total_count
			from
				team_group `group`
				left outer join team_card_belong_team_group belong on(belong.team_group_id = `group`.id)
				left outer join team_card_mst card on(card.id = belong.team_card_id and deleted = false)
				left outer join team_group `group2` on(`group2`.card_book_id = #{cardBookId})
				left outer join team_card_belong_team_group belong2 on(belong2.team_group_id = `group2`.id and belong2.team_card_id is not null)
			where
				`group`.card_book_id = #{cardBookId} and
				card.id is not null
			group by
				`group2`.card_book_id,
				card.id
			order by
				card.`name` asc,
				card.id desc
			limit #{page}, 10;
		</select>
		
		<select id="getAllCardListInCardBookOrderCompanyAsc" parameterType="Integer" resultType="com.remember.app.entity.card.Card">
			select
				card.id,
				card.`name`,
				card.company_name,
				card.department_name,
				card.position_name,
				card.create_date,
				
				count(distinct belong2.id) as total_count
			from
				team_group `group`
				left outer join team_card_belong_team_group belong on(belong.team_group_id = `group`.id)
				left outer join team_card_mst card on(card.id = belong.team_card_id and deleted = false)
				left outer join team_group `group2` on(`group2`.card_book_id = #{cardBookId})
				left outer join team_card_belong_team_group belong2 on(belong2.team_group_id = `group2`.id and belong2.team_card_id is not null)
			where
				`group`.card_book_id = #{cardBookId} and
				card.id is not null
			group by
				`group2`.card_book_id,
				card.id
			order by
				card.company_name is null asc,
				card.company_name asc,
				card.id desc
			limit #{page}, 10;
		</select>
		
		<select id="getCardListInSpecificGroup" parameterType="Integer" resultType="com.remember.app.entity.card.Card">
			select
				card.id,
				card.`name`,
				card.company_name,
				card.department_name,
				card.position_name,
				card.create_date,
				
				count(distinct belong2.team_card_id) as total_count
			from
				team_group `group`
				left outer join team_card_belong_team_group belong on(belong.team_group_id = `group`.id)
				left outer join team_card_mst card on(card.id = belong.team_card_id and deleted = false)
				left outer join team_card_belong_team_group belong2 on(belong2.team_group_id = `group`.id and belong2.team_card_id is not null)
			where
				`group`.id = #{groupId} and
				card.id is not null
			group by
				`group`.id,
				card.id
			order by
				card.create_date desc,
				card.id desc
			limit #{page}, 10;
		</select>
		
		<select id="getCardListInSpecificGroupOrderNameAsc" parameterType="Integer" resultType="com.remember.app.entity.card.Card">
			select
				card.id,
				card.`name`,
				card.company_name,
				card.department_name,
				card.position_name,
				card.create_date,
				
				count(distinct belong2.team_card_id) as total_count
			from
				team_group `group`
				left outer join team_card_belong_team_group belong on(belong.team_group_id = `group`.id)
				left outer join team_card_mst card on(card.id = belong.team_card_id and deleted = false)
				left outer join team_card_belong_team_group belong2 on(belong2.team_group_id = `group`.id and belong2.team_card_id is not null)
			where
				`group`.id = #{groupId} and
				card.id is not null
			group by
				`group`.id,
				card.id
			order by
				card.`name` asc,
				card.id desc
			limit #{page}, 10;
		</select>
		
		<select id="getCardListInSpecificGroupOrderCompanyAsc" parameterType="Integer" resultType="com.remember.app.entity.card.Card">
			select
				card.id,
				card.`name`,
				card.company_name,
				card.department_name,
				card.position_name,
				card.create_date,
				
				count(distinct belong2.team_card_id) as total_count
			from
				team_group `group`
				left outer join team_card_belong_team_group belong on(belong.team_group_id = `group`.id)
				left outer join team_card_mst card on(card.id = belong.team_card_id and deleted = false)
				left outer join team_card_belong_team_group belong2 on(belong2.team_group_id = `group`.id and belong2.team_card_id is not null)
			where
				`group`.id = #{groupId} and
				card.id is not null
			group by
				`group`.id,
				card.id
			order by
				card.company_name is null asc,
				card.company_name asc,
				card.id desc
			limit #{page}, 10;
		</select>
		
		<select id="getTeamCardDetail" parameterType="Integer" resultType="com.remember.app.entity.card.TeamCardDetail">
			select
				card.*,
				`profile`.nickname as reg_user_nickname,
				
				image.id as card_image_id,
				image.card_image,
				image.is_front,
				
				belong.team_group_id as group_id,
				`group`.group_name,
				belong.create_date as join_date,
				
				memo.id as memo_id,
				memo.user_id as memo_user_id,
				`profile2`.nickname as memo_nickname,
				memo.`contents`,
				memo.create_date as memo_create_date,
				memo.update_date as memo_update_date
			from
				team_card_mst card
				left outer join team_user_profile `profile` on(`profile`.user_id = card.user_id)
				left outer join team_card_image image on(image.team_card_id = card.id)
				left outer join team_card_belong_team_group belong on(belong.team_card_id = card.id)
				left outer join team_group `group` on(`group`.id = belong.team_group_id)
				left outer join team_card_memo memo on(memo.team_card_id = card.id)
				left outer join team_user_profile `profile2` on(`profile2`.user_id = memo.user_id)
			where
				card.id = #{cardId};
		</select>
		
		<insert id="insertTeamCard" parameterType="com.remember.app.entity.card.Card">
			insert into
				team_card_mst
			values(
				0,
				#{user_id},
		  		#{name},
		  		#{profile_img},
		  		#{phone},
		  		#{email},
		  		#{company_name},
		  		#{department_name},
		  		#{position_name},
		  		#{landline_phone},
		  		#{fax},
		  		#{address},
		  		#{sub_address},
		  		now(),
		  		now(),
		  		false,
		  		null
			);
			
			<selectKey keyProperty="id" resultType="Integer" order="AFTER">
				select id from team_card_mst where user_id = #{user_id} order by create_date desc limit 1;
			</selectKey>
		</insert>
		
		<insert id="insertTeamCardBelongDefaultGroup" parameterType="Integer">
			insert into
				team_card_belong_team_group
			values(
				0,
				#{cardId},
				#{defaultGroupId},
				now(),
				now()
			);
		</insert>
		
		<update id="updateTeamCard" parameterType="com.remember.app.entity.card.Card">
			update
				team_card_mst
			set
				name = #{name},
				profile_img = #{profile_img},
				phone = #{phone},
				email = #{email},
				company_name = #{company_name},
				department_name = #{department_name},
				landline_phone = #{landline_phone},
				fax = #{fax},
				address = #{address},
				sub_address = #{sub_address},
				update_date = now()
			where
				id = #{id};
		</update>
		
		<update id="updateTeamCardToDeleted" parameterType="Integer">
			update
				team_card_mst
			set
				deleted = true,
				deleted_date = now()
			where
				id = #{cardId};
		</update>
		
		<update id="updateTeamCardsToDeleted" parameterType="com.remember.app.requestDto.DeleteTeamCardsReqDto">
			update
				team_card_mst
			set
				deleted = true,
				deleted_date = now()
			where
				id in(
				<foreach collection="card_id_list" index="index" item="item" separator=",">
					#{item}
				</foreach>
				);
		</update>
		
		<delete id="deleteTeamCardAllBelongs" parameterType="Integer">
			delete from
				team_card_belong_team_group
			where
				team_card_id = #{cardId};
		</delete>
		
		<select id="getTeamCardImageId" parameterType="Integer" resultType="Integer">
			select
				id
			from
				team_card_image
			where
				team_card_id = #{cardId} and
				is_front = #{is_front};
		</select>
		
		<insert id="insertTeamCardImage" parameterType="com.remember.app.entity.card.CardImage">
			insert into
				team_card_image
			values(
				0,
				#{card_id},
				#{card_image},
				#{is_front},
				now(),
				now()
			);
		</insert>
		
		<update id="updateTeamCardImage" parameterType="com.remember.app.entity.card.CardImage">
			update
				team_card_image
			set
				card_image = #{card_image},
				update_date = now()
			where
				id = #{id};
		</update>
		
		<select id="getTeamJoinUsers" parameterType="Integer" resultType="com.remember.app.entity.card.TeamUserProfile">
			select
				`profile`.*,
				`join`.role,
				um.phone,
				
				count(distinct `join`.id) as total_count
			from
				team_join_user `join`
				left outer join team_user_profile `profile` on(`profile`.user_id = `join`.joined_user_id)
				left outer join user_mst um on(um.id = `join`.joined_user_id)
			where
				`join`.team_id = #{teamId} and `join`.joined_user_id != #{userId}
			limit #{page}, 10;
		</select>
		
		<select id="getCardBookJoinUsers" parameterType="Integer" resultType="com.remember.app.entity.card.TeamUserProfile">
			select
				`profile`.*,
				`join`.role,
				um.phone,
				
				count(distinct `join2`.id) as total_count
			from
				team_card_book_join_user `join`
				left outer join team_user_profile `profile` on(`profile`.user_id = `join`.joined_user_id)
				left outer join user_mst um on(um.id = `join`.joined_user_id)
				left outer join team_card_book_join_user `join2` on(`join2`.team_card_book_id = #{teamCardBookId})
			where
				`join`.team_card_book_id = #{teamCardBookId}
			group by
				`join`.joined_user_id
			limit #{page}, 10;
		</select>
		
		<insert id="insertTeamCardMemo" parameterType="com.remember.app.entity.card.CardMemo">
			insert into
				team_card_memo
			values(
				0,
				#{card_id},
				#{user_id},
				#{contents},
				now(),
				now()
			);
		</insert>
		
		<update id="updateTeamCardMemo" parameterType="com.remember.app.entity.card.CardMemo">
			update
				team_card_memo
			set
				contents = #{contents},
				update_date = now()
			where
				id = #{id};
		</update>
		
		<delete id="deleteTeamCardMemo" parameterType="Integer">
			delete from
				team_card_memo
			where
				id = #{cardMemoId};
		</delete>
		
		<delete id="deleteTeamCardBelongTeamGroups" parameterType="com.remember.app.requestDto.UpdateTeamCardBelongTeamGroupReqDto">
			delete from
				team_card_belong_team_group
			where
				team_card_id = #{card_id};
		</delete>
		
		<delete id="deleteTeamCardsBelongTeamGroups" parameterType="com.remember.app.requestDto.UpdateTeamCardBelongTeamGroupReqDto">
			delete from
				team_card_belong_team_group
			where
				team_card_id in(
				<foreach collection="card_id_list" index="index" item="item" separator=",">
					#{item}
				</foreach>
				);
		</delete>
		
		<insert id="insertTeamCardBelongTeamGroups" parameterType="com.remember.app.requestDto.UpdateTeamCardBelongTeamGroupReqDto">
			insert into
				team_card_belong_team_group
			values
			<foreach collection="group_id_list" index="index" item="item" separator=",">
				(
					0,
					#{card_id},
					#{item},
					now(),
					now()
				)
			</foreach>
			;
		</insert>
		
		<insert id="insertTeamCardBelongDefaultTeamGroup" parameterType="com.remember.app.requestDto.UpdateTeamCardBelongTeamGroupReqDto">
			insert into
				team_card_belong_team_group
			values(
				0,
				#{card_id},
				#{default_group_id},
				now(),
				now()
			);
		</insert>
		
		<select id="getTeamCardEmails" parameterType="com.remember.app.requestDto.GetCardEmailReqDto" resultType="com.remember.app.entity.card.Card">
			select
				id,
				email
			from
				team_card_mst
			where
				id in(
				<foreach collection="card_id_list" index="index" item="item" separator=",">
					#{item}
				</foreach>
				);
		</select>
		
  </mapper>