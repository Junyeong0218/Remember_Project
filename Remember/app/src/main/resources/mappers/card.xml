<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.remember.app.entity.card.CardRepository">
  <select id="getCards" parameterType="Integer" resultType="com.remember.app.entity.card.Card">
  select
  	*
  from
  	card_mst
  where
  	user_id = #{user_id}
  </select>
  
  <insert id="insertCard" parameterType="com.remember.app.entity.card.Card">
  	insert into
  		card_mst
  	values(
  		0,
  		#{user_id},
  		#{name},
  		#{phone},
  		#{email},
  		#{company_name},
  		#{department_name},
  		#{position_name},
  		#{landline_phone},
  		#{fax},
  		#{address},
  		#{sub_address},
  		now(),
  		now()
  	);
  	<selectKey keyProperty="id" resultType="Integer" order="AFTER">
  		select id from card_mst where user_id = #{user_id} and name = #{name} order by create_date desc limit 1;
  	</selectKey>

  </insert>
  
  <update id="updateCard" parameterType="com.remember.app.entity.card.Card">
  	update
  		card_mst
  	set
  		name = #{name},
  		phone = #{phone},
  		email = #{email},
  		company_name = #{company_name},
  		department_name = #{department_name},
  		position_name = #{position_name},
  		landline_phone = #{landline_phone},
  		fax = #{fax},
  		address = #{address},
  		sub_address = #{sub_address},
  		update_date = now()
  	where
  		id = #{id}
  </update>
  
  <delete id="deleteCard" parameterType="Integer">
  	delete
  	from
  		card_mst
  	where
  		user_id = #{user_id}
  </delete>
  
  <insert id="insertGroup" parameterType="com.remember.app.entity.card.Group">
  	insert into
  		card_group_mst
  	values(
  		0,
  		#{user_id},
  		#{group_name},
  		now(),
  		now()
  	);
  	
  	<selectKey keyProperty="id" resultType="Integer" order="AFTER">
  		select id from card_group_mst where user_id = #{user_id} and group_name = #{group_name};
  	</selectKey>
  </insert>
  
  <select id="getGroup" parameterType="Integer" resultType="com.remember.app.entity.card.GroupSummary">
  	SELECT 
		cgm.id,
		cgm.group_name,
		COUNT(DISTINCT cbg.id) AS card_count,
		COUNT(DISTINCT cbg2.card_id) AS total_count
	FROM 
		card_group_mst cgm
		LEFT OUTER JOIN card_belong_group cbg ON(cbg.group_id = cgm.id)
		LEFT OUTER JOIN card_group_mst cgm2 ON(cgm2.user_id=#{user_id})
		LEFT OUTER JOIN card_belong_group cbg2 ON(cbg2.group_id = cgm2.id)
	WHERE
		cgm.user_id=#{user_id}
	GROUP BY
		cgm.id
	order by
		cgm.create_date desc;
  </select>
  
  <select id="getGroupByGroupId" parameterType="Integer" resultType="com.remember.app.entity.card.GroupCard">
  	select
	  	cm.*,
	  	cgm.group_name
	from
	  	card_belong_group cbg
	  	LEFT OUTER JOIN card_mst cm ON(cm.id = cbg.card_id)
	  	LEFT OUTER JOIN card_group_mst cgm ON(cgm.id = cbg.group_id)
	where
	  	group_id = #{groupId}
	order by
  		cm.create_date desc;
	  	
  </select>
  
  <update id="updateGroup" parameterType="com.remember.app.entity.card.Group">
  	update
  		card_group_mst
  	set
  		group_name = #{group_name},
  		update_date = now()
  	where
  		id = #{id}
  </update>
  
  <delete id="deleteGroup" parameterType="com.remember.app.entity.card.Group">
  	delete
  	from
  		card_group_mst
  	where
  		id =#{id}
  </delete>
  
  <select id="getUserCard" parameterType="Integer" resultType="com.remember.app.entity.card.Card">
  	select
  		*
  	from
  		card_mst
  	where
  		id = #{id}
  </select>
  
  <insert id="addUserGroup" parameterType="com.remember.app.entity.card.AddGroup">
  	insert into
  		card_belong_group
  	values(
  		0,
  		#{group_id},
  		#{card_id},
  		now(),
  		now()
  	)
  </insert>
  
  <select id="getCardSummaryList" parameterType="Integer" resultType="com.remember.app.entity.card.Card">
  	select
  		card.id,
  		card.`name`,
  		card.company_name,
  		card.department_name,
  		card.position_name,
  		card.create_date
  	from
  		card_group_mst `group`
  		left outer join card_belong_group belong on(belong.group_id = `group`.id)
  		left outer join card_mst card on(card.id=belong.card_id)
  	where
  		`group`.user_id = #{user_id} and
  		belong.id is not null
  	group by
  		belong.card_id
  	order by
  		card.create_date desc;
  </select>
  
		<insert id="insertTeam" parameterType="com.remember.app.entity.card.Team">
			insert into
				team_mst
			values(
				0,
				#{made_user_id},
				#{grade_id},
				#{title},
				now(),
				now(),
				false,
				null
			);
			
			<selectKey keyProperty="id" resultType="Integer" order="AFTER">
				select id from team_mst where made_user_id = #{made_user_id} order by create_date desc limit 1;
			</selectKey>
		</insert>
		
		<update id="updateTeamToDelete" parameterType="com.remember.app.entity.card.Team">
			update
				team_mst
			set
				deleted = true,
				deleted_date = now()
			where
				id = #{id} and made_user_id = #{made_user_id};
		</update>
		
		<insert id="joinTeam" parameterType="com.remember.app.entity.card.TeamJoinUser">
			insert into
				team_join_user
			values(
				0,
				#{team_id},
				#{joined_user_id},
				#{role},
				now(),
				now()
			);
		</insert>
		
		<delete id="leaveTeam" parameterType="com.remember.app.entity.card.TeamJoinUser">
			delete from
				team_join_user
			where
				team_id = #{team_id} and
				user_id = #{joined_user_id};
		</delete>
		
		<select id="getAdmincCountInTeam" parameterType="com.remember.app.entity.card.TeamJoinUser" resultType="Integer">
			select
				count(distinct id)
			from
				team_join_user
			where
				role = "ROLE" and
				team_id = #{team_id} and
				joined_user_id != #{joined_user_id};
		</select>

		<insert id="insertTeamCardBook" parameterType="com.remember.app.entity.card.TeamCardBook">
			insert into
				team_card_book
			values(
				0,
				#{team_id},
				#{card_book_name},
				now(),
				now()
			);
			
			<selectKey keyProperty="id" resultType="Integer" order="AFTER">
				select id from team_card_book where team_id = #{team_id} and card_book_name = #{card_book_name};
			</selectKey>
		</insert>
		
		<update id="updateTeamCardBookName" parameterType="com.remember.app.entity.card.TeamCardBook">
			update
				team_card_book
			set
				card_book_name = #{card_book_name},
				update_date = now()
			where
				id = #{id};
		</update>
		
		<insert id="insertTeamCardBookJoinUser" parameterType="com.remember.app.entity.card.TeamCardBookJoinUser">
			insert into
				team_card_book_join_user
			values(
				0,
				#{team_card_book_id},
				#{joined_user_id},
				#{role},
				now(),
				now()
			);
		</insert>
		
		<insert id="insertTeamUserProfile" parameterType="com.remember.app.entity.card.TeamUserProfile">
			insert into
				team_user_profile
			values(
				0,
				#{user_id},
				#{nickname},
				now(),
				now()
			);
		</insert>
		
		<update id="updateProfileNickname" parameterType="com.remember.app.entity.card.TeamUserProfile">
			update
				team_user_profile
			set
				nickname = #{nickname},
				update_date = now()
			where
				id = #{id};
		</update>
  
		<insert id="insertTeamGroup" parameterType="com.remember.app.entity.card.TeamGroup">
			insert into
				team_group
			values(
				0,
				#{card_book_id},
				#{group_name},
				now(),
				now()
			);
		</insert>
		
		<update id="updateTeamName" parameterType="com.remember.app.entity.card.Team">
			update
				team_mst
			set
				title = #{title},
				update_date = now()
			where
				id = #{id};
		</update>
		
		<select id="getTeamUserProfile" parameterType="Integer" resultType="com.remember.app.entity.card.TeamUserProfile">
			select
				*
			from
				team_user_profile
			where
				user_id = #{userId};
		</select>
		
		<select id="getTeamList" parameterType="Integer" resultType="com.remember.app.entity.card.TeamDetail">
			select
				team.id,
				team.made_user_id,
				
				team.grade_id,
				grade.grade,
				grade.max_card_book_count,
				grade.max_card_count,
			
				team.title,	
				team.create_date,
				
				count(distinct `join2`.id) as total_join_user_count,
				count(distinct belong.id) as total_card_count
			from
				team_join_user `join`
				left outer join team_mst team on(team.id = `join`.team_id and team.deleted = false)
				left outer join team_grade_mst grade on(grade.id = team.grade_id)
				left outer join team_join_user `join2` on(`join2`.team_id = team.id)
				left outer join team_card_book card_book on(card_book.team_id = team.id)
				left outer join team_group `group` on(`group`.card_book_id = card_book.id)
				left outer join card_belong_team_group belong on(belong.team_group_id = `group`.id)
			where
				`join`.joined_user_id = #{userId}
			group by
				team.id;
		</select>
		
		<select id="getCardBookList" parameterType="Integer" resultType="com.remember.app.entity.card.TeamCardBookSummary">
			select
				book.id,
				book.team_id,
				book.card_book_name,
				count(distinct `join`.id) as join_count,
				count(distinct belong.id) as card_count
			from
				team_card_book book
				left outer join team_card_book_join_user `join` ON(`join`.team_card_book_id = book.id)
				left outer join team_group `group` ON(`group`.card_book_id = book.id)
				left outer join card_belong_team_group belong ON(belong.team_group_id = `group`.id)
			where
				book.team_id = #{teamId}
			group by
				book.id;
		</select>
		
		<select id="getTeamGroupList" parameterType="Integer" resultType="com.remember.app.entity.card.TeamGroupSummary">
			select
				`group`.*,
				count(distinct belong.id) as card_count,
				count(distinct belong.id) as total_count
			from
				team_group `group`
				left outer join card_belong_team_group belong on(belong.team_group_id = `group`.id)
				left outer join card_belong_team_group belong2 on(belong2.team_group_id in (select id from team_group where card_book_id = #{cardBookId}))
			where
				`group`.card_book_id = #{cardBookId}
			group by
				belong.team_group_id;
		</select>
		
		<select id="getAllCardListInCardBook" parameterType="Integer" resultType="com.remember.app.entity.card.Card">
			select
				card.id,
				card.`name`,
				card.company_name,
				card.department_name,
				card.position_name,
				card.create_date,
				
				count(distinct belong2.id) as total_count
			from
				team_group `group`
				left outer join card_belong_team_group belong on(belong.team_group_id = `group`.id)
				left outer join card_mst card on(card.id = belong.card_id)
				left outer join team_group `group2` on(`group2`.card_book_id = 6)
				left outer join card_belong_team_group belong2 on(belong2.team_group_id = `group2`.id and belong2.card_id is not null)
			where
				`group`.card_book_id = #{cardBookId} and
				card.id is not null
			group by
				`group2`.card_book_id
			order by
				card.create_date desc
			limit #{page}, 10;
		</select>
		
		<select id="getCardListInSpecificGroup" parameterType="Integer" resultType="com.remember.app.entity.card.Card">
			select
				card.id,
				card.`name`,
				card.company_name,
				card.department_name,
				card.position_name,
				card.create_date,
				
				count(distinct card.id) as total_count
			from
				team_group `group`
				left outer join card_belong_team_group belong on(belong.team_group_id = `group`.id)
				left outer join card_mst card on(card.id = belong.card_id)
			where
				`group`.id = #{groupId} and
				card.id is not null
			order by
				card.create_date desc
			limit #{page}, 10;
		</select>
		
		<select id="getTeamCardDetail" parameterType="Integer" resultType="com.remember.app.entity.card.TeamCardDetail">
			select
				card.*,
				`profile`.nickname as reg_user_nickname,
				belong.team_group_id as group_id,
				`group`.group_name,
				belong.create_date as join_date,
				memo.id as memo_id,
				memo.user_id as memo_user_id,
				`profile2`.nickname as memo_nickname,
				memo.`contents`,
				memo.create_date as memo_create_date,
				memo.update_date as memo_update_date
			from
				card_mst card
				left outer join team_user_profile `profile` on(`profile`.user_id = card.user_id)
				left outer join card_belong_team_group belong on(belong.card_id = card.id)
				left outer join team_group `group` on(`group`.id = belong.team_group_id)
				left outer join card_memo memo on(memo.card_id = card.id and memo.is_team = true)
				left outer join team_user_profile `profile2` on(`profile2`.user_id = memo.user_id)
			where
				card.id = #{cardId};
		</select>
		
		<select id="getTeamJoinUsers" parameterType="Integer" resultType="com.remember.app.entity.card.TeamUserProfile">
			select
				`profile`.*,
				`join`.role,
				um.phone,
				
				count(distinct `join`.id) as total_count
			from
				team_join_user `join`
				left outer join team_user_profile `profile` on(`profile`.user_id = `join`.joined_user_id)
				left outer join user_mst um on(um.id = `join`.joined_user_id)
			where
				`join`.team_id = #{teamId} and `join`.joined_user_id != #{userId}
			limit #{page}, 10;
		</select>
		
		<select id="getCardBookJoinUsers" parameterType="Integer" resultType="com.remember.app.entity.card.TeamUserProfile">
			select
				`profile`.*,
				`join`.role,
				um.phone,
				
				count(distinct `join`.id) as total_count
			from
				team_card_book_join_user `join`
				left outer join team_user_profile `profile` on(`profile`.user_id = `join`.joined_user_id)
				left outer join user_mst um on(um.id = `join`.joined_user_id)
			where
				`join`.team_card_book_id = #{teamCardBookId}
			limit #{page}, 10;
		</select>
		
		<insert id="insertTeamCardMemo" parameterType="com.remember.app.entity.card.CardMemo">
			insert into
				card_memo
			values(
				0,
				#{card_id},
				#{user_id},
				#{contents},
				true,
				now(),
				now()
			);
		</insert>
		
		<update id="updateTeamCardMemo" parameterType="com.remember.app.entity.card.CardMemo">
			update
				card_memo
			set
				contents = #{contents},
				update_date = now()
			where
				id = #{id};
		</update>
		
		<delete id="deleteTeamCardMemo" parameterType="Integer">
			delete from
				card_memo
			where
				id = #{cardMemoId};
		</delete>
		
  </mapper>