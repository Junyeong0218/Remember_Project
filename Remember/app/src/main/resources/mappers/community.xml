<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.remember.app.entity.community.CommunityRepository">

	<select id="getCategoriesWithJoinCount" resultType="com.remember.app.entity.community.category.SubCategoryDetail">
		select
			sc.*,
			count(distinct `join`.id) as join_count
		from
			community_sub_category sc
			left outer join community_join_user `join` on(`join`.sub_category_id = sc.id)
		group by
			sc.id;
	</select>
	
	<select id="getCategoriesWithJoinCountForLoginUser" parameterType="Integer" resultType="com.remember.app.entity.community.category.SubCategoryDetail">
		select
			sc.*,
			count(distinct `join`.id) as join_count,
			count(distinct `join2`.id) as join_flag
		from
			community_sub_category sc
			left outer join community_join_user `join` on(`join`.sub_category_id = sc.id)
			left outer join community_join_user `join2` on(`join2`.sub_category_id = sc.id and `join2`.user_id = #{userId})
		group by
			sc.id
		order by
			sc.main_category_id asc,
			join_flag desc,
			sc.id asc;
	</select>
	
	<select id="getBestArticleSummaries" resultType="com.remember.app.entity.community.article.BestArticleSummary">
		select
			am.id,
			am.sub_category_id,
			category.category_name,
			am.title,
			am.view_count,
			count(distinct al.id) as like_count,
			count(distinct acm.id) as comment_count
		from
			article_mst am
			left outer join community_sub_category category on(category.id = am.sub_category_id)
			left outer join article_like al on(al.article_id = am.id)
			left outer join article_comment_mst acm on(acm.article_id = am.id)
		where
			am.deleted = false
		group by
			am.id
		order by
			like_count desc
		limit 14;
	</select>
	
	<select id="getBestArticleSummariesAboutCategory" parameterType="Integer" resultType="com.remember.app.entity.community.article.BestArticleSummary">
		select
			am.id,
			am.title,
			count(distinct al.id) as like_count
		from
			article_mst am
			left outer join article_like al on(al.article_id = am.id)
		where
			am.sub_category_id = #{categoryId} and
			am.deleted = false
		group by
			am.id
		order by
			like_count desc
		limit 3;
	</select>
	
	<select id="getTotalArticleSummaries" resultType="com.remember.app.entity.community.article.ArticleSummary">
		select
			am.id,
			
			am.user_id,
			if(am.use_nickname = true, um.nickname, um.`name`) as nickname,
			ud.department_name,
			ud.profile_img,
			
			am.sub_category_id,
			category.category_name,
			
			am.article_tag_id as tag_id,
			tag.tag_name,
			
			am.title,
			am.`contents`,
			image.file_name,
			am.create_date,
			am.view_count,
			count(distinct al.id) as like_count,
			count(distinct acm.id) as comment_count
		from
			article_mst am
			left outer join user_mst um on(um.id = am.user_id)
			left outer join user_detail ud on(ud.user_id = am.user_id)
			left outer join community_sub_category category on(category.id = am.sub_category_id)
			left outer join article_tag_mst tag on(tag.id = am.article_tag_id)
			left outer join article_image image on(image.article_id = am.id)
			left outer join article_like al on(al.article_id = am.id)
			left outer join article_comment_mst acm on(acm.article_id = am.id)
		where
			am.deleted = false
		group by
			am.id
		order by
			am.create_date desc
		limit #{page}, 15;
	</select>
	
	<select id="getTopicArticleSummaries" parameterType="Integer" resultType="com.remember.app.entity.community.article.ArticleSummary">
		select
			am.id,
			
			am.user_id,
			um.nickname,
			ud.department_name,
			ud.profile_img,
			
			am.sub_category_id,
			category.category_name,
			
			am.article_tag_id as tag_id,
			tag.tag_name,
			
			am.title,
			am.`contents`,
			image.file_name,
			am.create_date,
			am.view_count,
			count(distinct al.id) as like_count,
			count(distinct acm.id) as comment_count
		from
			article_mst am
			left outer join user_mst um on(um.id = am.user_id)
			left outer join user_detail ud on(ud.user_id = am.user_id)
			left outer join community_sub_category category on(category.id = am.sub_category_id)
			left outer join article_tag_mst tag on(tag.id = am.article_tag_id)
			left outer join article_image image on(image.article_id = am.id)
			left outer join article_like al on(al.article_id = am.id)
			left outer join article_comment_mst acm on(acm.article_id = am.id)
		where
			am.sub_category_id = #{categoryId} and
			am.deleted = false
		group by
			am.id
		order by
			am.create_date desc
		limit #{page}, 15;
	</select>
	
	<select id="getTopicArticleSummariesWithTag" parameterType="Integer" resultType="com.remember.app.entity.community.article.ArticleSummary">
		select
			am.id,
			
			am.user_id,
			um.nickname,
			ud.department_name,
			ud.profile_img,
			
			am.sub_category_id,
			category.category_name,
			
			am.article_tag_id as tag_id,
			tag.tag_name,
			
			am.title,
			am.`contents`,
			image.file_name,
			am.create_date,
			am.view_count,
			count(distinct al.id) as like_count,
			count(distinct acm.id) as comment_count
		from
			article_mst am
			left outer join user_mst um on(um.id = am.user_id)
			left outer join user_detail ud on(ud.user_id = am.user_id)
			left outer join community_sub_category category on(category.id = am.sub_category_id)
			left outer join article_tag_mst tag on(tag.id = am.article_tag_id)
			left outer join article_image image on(image.article_id = am.id)
			left outer join article_like al on(al.article_id = am.id)
			left outer join article_comment_mst acm on(acm.article_id = am.id)
		where
			am.sub_category_id = #{categoryId} and
			am.article_tag_id = #{tagId} and
			am.deleted = false
		group by
			am.id
		order by
			am.create_date desc
		limit #{page}, 15;
	</select>
	
	<select id="getTotalArticleCount" resultType="Integer">
		select
			count(id)
		from
			article_mst
		where
			deleted = false;
	</select>
	
	<select id="getTopicArticleCount" parameterType="Integer" resultType="Integer">
		select
			count(id)
		from
			article_mst
		where
			sub_category_id = #{categoryId} and
			deleted = false;
	</select>
	
	<select id="getTopicArticleCountWithTag" parameterType="Integer" resultType="Integer">
		select
			count(id)
		from
			article_mst
		where
			sub_category_id = #{categoryId} and
			article_tag_id = #{tagId} and
			deleted = false;
	</select>
	
	<select id="getArticleDetail" parameterType="Integer" resultType="com.remember.app.entity.community.article.ArticleDetail">
		select
			am.id,
			
			am.user_id,
			am.use_nickname,
			if(am.use_nickname = true, um.nickname, um.name) as nickname,
			ud.department_name,
			ud.profile_img,
			
			am.sub_category_id,
			category.category_name,
			
			am.article_tag_id as tag_id,
			tag.tag_name,
			
			am.title,
			am.`contents`,
			
			image.file_name,
			
			am.view_count,
			count(distinct al.id) as like_count,
			count(distinct acm.id) as comment_count,
			
			am.create_date,
			
			acm.id as comment_id,
			acm.user_id as commented_user_id,
			if(acm.use_nickname = true, um2.nickname, um2.name) as commented_user_nickname,
			ud2.department_name as commented_user_department_name,
			ud2.profile_img as commented_user_profile_img,
			acm.`contents` as comment_contents,
			acm.related_comment_id,
			acm.create_date as comment_create_date,
			acm.deleted as comment_deleted,
			count(distinct acl.id) as comment_like_count
		from 
			article_mst am
			left outer join user_mst um on(um.id = am.user_id)
			left outer join user_detail ud on(ud.user_id = am.user_id)
			left outer join community_sub_category category on(category.id = am.sub_category_id)
			left outer join article_tag_mst tag on(tag.id = am.article_tag_id)
			left outer join article_image image on(image.article_id = am.id)
			left outer join article_like al on(al.article_id = am.id)
			left outer join article_comment_mst acm on(acm.article_id = am.id)
			left outer join user_mst um2 on(um2.id = acm.user_id)
			left outer join user_detail ud2 on(ud2.user_id = acm.user_id)
			left outer join article_comment_like acl on(acl.comment_id = acm.id)
		where
			am.id = #{articleId}
		group by
			am.id,
			acm.id,
			image.id
		order by
			acm.create_date asc,
			image.id asc;
	</select>
	
	<select id="getArticleDetailForLoginUser" parameterType="Integer" resultType="com.remember.app.entity.community.article.ArticleDetail">
		select
			am.id,
			
			am.user_id,
			am.use_nickname,
			if(am.use_nickname = true, um.nickname, um.name) as nickname,
			ud.department_name,
			ud.profile_img,
			
			am.sub_category_id,
			category.category_name,
			
			am.article_tag_id as tag_id,
			tag.tag_name,
			
			am.title,
			am.`contents`,
			
			image.file_name,
			
			am.view_count,
			count(distinct al.id) as like_count,
			count(distinct acm.id) as comment_count,
			
			am.create_date,
			
			if(al.user_id = #{userId}, true, false) as like_flag,
			
			acm.id as comment_id,
			acm.user_id as commented_user_id,
			if(acm.use_nickname = true, um2.nickname, um2.name) as commented_user_nickname,
			ud2.department_name as commented_user_department_name,
			ud2.profile_img as commented_user_profile_img,
			acm.`contents` as comment_contents,
			acm.related_comment_id,
			acm.create_date as comment_create_date,
			acm.deleted as comment_deleted,
			count(distinct acl.id) as comment_like_count,
			
			if(acl.user_id = #{userId}, true, false) as comment_like_flag
		from 
			article_mst am
			left outer join user_mst um on(um.id = am.user_id)
			left outer join user_detail ud on(ud.user_id = am.user_id)
			left outer join community_sub_category category on(category.id = am.sub_category_id)
			left outer join article_tag_mst tag on(tag.id = am.article_tag_id)
			left outer join article_image image on(image.article_id = am.id)
			left outer join article_like al on(al.article_id = am.id)
			left outer join article_comment_mst acm on(acm.article_id = am.id)
			left outer join user_mst um2 on(um2.id = acm.user_id)
			left outer join user_detail ud2 on(ud2.user_id = acm.user_id)
			left outer join article_comment_like acl on(acl.comment_id = acm.id)
		where
			am.id = #{articleId}
		group by
			am.id,
			acm.id,
			image.id
		order by
			acm.create_date asc,
			image.id asc;
	</select>
		
	<select id="getCommentListASC" parameterType="Integer" resultType="com.remember.app.entity.community.article.CommentDetail">
		select
			acm.id,
			acm.user_id,
			if(acm.use_nickname = true, um.nickname, um.`name`) as nickname,
			ud.department_name,
			ud.profile_img,
			acm.`contents`,
			acm.related_comment_id,
			acm.create_date,
			acm.deleted,
			count(distinct acl.id) as like_count
		from 
			article_mst am
			left outer join article_comment_mst acm on(acm.article_id = am.id)
			left outer join user_mst um on(um.id = acm.user_id)
			left outer join user_detail ud on(ud.user_id = acm.user_id)
			left outer join article_comment_like acl on(acl.comment_id = acm.id)
		where
			am.id = #{articleId}
		group by
			am.id,
			acm.id
		order by
			acm.create_date asc;
	</select>
	
	<select id="getCommentListDESC" parameterType="Integer" resultType="com.remember.app.entity.community.article.CommentDetail">
		select
			acm.id,
			acm.user_id,
			if(acm.use_nickname = true, um.nickname, um.`name`) as nickname,
			ud.department_name,
			ud.profile_img,
			acm.`contents`,
			acm.related_comment_id,
			acm.create_date,
			acm.deleted,
			count(distinct acl.id) as like_count
		from 
			article_mst am
			left outer join article_comment_mst acm on(acm.article_id = am.id)
			left outer join user_mst um on(um.id = acm.user_id)
			left outer join user_detail ud on(ud.user_id = acm.user_id)
			left outer join article_comment_like acl on(acl.comment_id = acm.id)
		where
			am.id = #{articleId}
		group by
			am.id,
			acm.id
		order by
			acm.create_date desc;
	</select>
	
	<select id="getCommentListForUserASC" parameterType="Integer" resultType="com.remember.app.entity.community.article.CommentDetail">
		select
			acm.id,
			acm.user_id,
			if(acm.use_nickname = true, um.nickname, um.`name`) as nickname,
			ud.department_name,
			ud.profile_img,
			acm.`contents`,
			acm.related_comment_id,
			acm.create_date,
			acm.deleted,
			count(distinct acl.id) as like_count,
			
			if(acl.user_id = #{userId}, true, false) as like_flag
		from 
			article_mst am
			left outer join article_comment_mst acm on(acm.article_id = am.id)
			left outer join user_mst um on(um.id = acm.user_id)
			left outer join user_detail ud on(ud.user_id = acm.user_id)
			left outer join article_comment_like acl on(acl.comment_id = acm.id)
		where
			am.id = #{articleId}
		group by
			am.id,
			acm.id
		order by
			acm.create_date asc;
	</select>
	
	<select id="getCommentListForUserDESC" parameterType="Integer" resultType="com.remember.app.entity.community.article.CommentDetail">
		select
			acm.id,
			acm.user_id,
			if(acm.use_nickname = true, um.nickname, um.`name`) as nickname,
			ud.department_name,
			ud.profile_img,
			acm.`contents`,
			acm.related_comment_id,
			acm.create_date,
			acm.deleted,
			count(distinct acl.id) as like_count,
			
			if(acl.user_id = #{userId}, true, false) as like_flag
		from 
			article_mst am
			left outer join article_comment_mst acm on(acm.article_id = am.id)
			left outer join user_mst um on(um.id = acm.user_id)
			left outer join user_detail ud on(ud.user_id = acm.user_id)
			left outer join article_comment_like acl on(acl.comment_id = acm.id)
		where
			am.id = #{articleId}
		group by
			am.id,
			acm.id
		order by
			acm.create_date desc;
	</select>
	
	<select id="isUserJoinCategory" parameterType="com.remember.app.entity.community.category.CommunityJoinUser" resultType="Integer">
		select
			count(id)
		from
			community_join_user
		where
			sub_category_id = ${sub_category_id} and 
			user_id = ${user_id};
	</select>
	
	<select id="getCategoryDetail" parameterType="Integer" resultType="com.remember.app.entity.community.category.CategoryDetail">
		select
			sc.id as sub_category_id,
			sc.category_name,
			
			count(distinct `join`.id) as join_count,
			
			tag.id as tag_id,
			tag.tag_name,
			
			am.id as article_id,
			am.title as article_title
		from
			community_sub_category sc
			left outer join community_join_user `join` on(`join`.sub_category_id = sc.id)
			left outer join article_tag_belong_category belong on(belong.main_category_id = sc.main_category_id)
			left outer join article_tag_mst tag on(tag.id = belong.article_tag_id)
			left outer join article_mst am on(am.sub_category_id = sc.id and am.id = (select id from article_mst where sub_category_id = sc.id order by create_date desc limit 1))
		where
			sc.id = #{categoryId}
		group by
			sc.id,
			tag.id;
	</select>
	
	<select id="getCategoryDetailForLoginUser" parameterType="Integer" resultType="com.remember.app.entity.community.category.CategoryDetail">
		select
			sc.id as sub_category_id,
			sc.category_name,
			
			count(distinct `join`.id) as join_count,
			if(`join`.user_id = #{userId}, true, false) as join_flag,
			
			tag.id as tag_id,
			tag.tag_name,
			
			am.id as article_id,
			am.title as article_title
		from
			community_sub_category sc
			left outer join community_join_user `join` on(`join`.sub_category_id = sc.id)
			left outer join article_tag_belong_category belong on(belong.main_category_id = sc.main_category_id)
			left outer join article_tag_mst tag on(tag.id = belong.article_tag_id)
			left outer join article_mst am on(am.sub_category_id = sc.id and am.id = (select id from article_mst where sub_category_id = sc.id order by create_date desc limit 1))
		where
			sc.id = #{categoryId}
		group by
			sc.id,
			tag.id;
	</select>
	
	<select id="getCategoryName" parameterType="Integer" resultType="String">
		select
			category_name
		from
			community_sub_category
		where
			id = #{categoryId};
	</select>
	
	<insert id="joinCategory" parameterType="com.remember.app.entity.community.category.CommunityJoinUser">
		insert into
			community_join_user
		values(
			0,
			#{sub_category_id},
			#{user_id},
			now(),
			now()
		);
	</insert>
	
	<delete id="leaveCategory" parameterType="com.remember.app.entity.community.category.CommunityJoinUser">
		delete from
			community_join_user
		where
			sub_category_id = #{sub_category_id} and
			user_id = #{user_id};
	</delete>
	
	<select id="getJoinedCategories" parameterType="Integer" resultType="com.remember.app.entity.community.category.JoinedCategory">
		select 
			category.id as main_category_id,
			category.category_kor_name,
			
			sub.id as sub_category_id,
			sub.category_name
		from 
			community_join_user `join`
			left outer join community_sub_category sub on(sub.id = `join`.sub_category_id)
			left outer join community_category_mst category on(category.id = sub.main_category_id)
		where
			`join`.user_id = #{id}
		order by
			main_category_id asc,
			sub_category_id asc;
	</select>
	
	<select id="getTagsAboutSubCategory" parameterType="Integer" resultType="com.remember.app.entity.community.article.Tag">
		select
			tag.id,
			tag.tag_name
		from
			community_sub_category sub
			left outer join article_tag_belong_category belong on(belong.main_category_id = sub.main_category_id)
			left outer join article_tag_mst tag on(tag.id = belong.article_tag_id)
		where
			sub.id = #{subCategoryId};
	</select>
	
	<insert id="insertArticle" parameterType="com.remember.app.entity.community.article.Article">
		insert into
			article_mst
		values(
			0,
			#{user_id},
			#{sub_category_id},
			#{article_tag_id},
			#{title},
			#{contents},
			0,
			#{use_nickname},
			now(),
			now(),
			false,
			null
		);
		
		<selectKey keyProperty="id" resultType="Integer" order="AFTER">
			select id from article_mst where user_id = #{user_id} order by create_date desc limit 1;
		</selectKey>
	</insert>
	
	<insert id="insertArticleImages" parameterType="List">
		insert into
			article_image
		values
		<foreach collection="list" index="index" item="item" separator=",">
		(
			0,
			#{item.article_id},
			#{item.file_name},
			now(),
			now()
		)
		</foreach>
		;
	</insert>
	
	<update id="updateArticle" parameterType="com.remember.app.entity.community.article.Article">
		update
			article_mst
		set
			sub_category_id = #{sub_category_id},
			article_tag_id = #{article_tag_id},
			title = #{title},
			contents = #{contents},
			use_nickname = #{use_nickname},
			update_date = now()
		where
			id = #{id} and
			user_id = #{user_id};
	</update>
	
	<delete id="deleteArticleImages" parameterType="List">
		delete from
			article_image
		where
			file_name in(
			<foreach collection="list" index="index" item="item" separator=",">
				#{item.file_name}
			</foreach>
			);
	</delete>
	
	<update id="deleteArticle" parameterType="Integer">
		update
			article_mst
		set
			deleted = true,
			deleted_date = now()
		where
			id = #{articleId} and
			user_id = #{userId};
	</update>
	
	<insert id="insertArticleLike" parameterType="com.remember.app.entity.community.article.ArticleLike">
		insert into
			article_like
		values(
			0,
			#{article_id},
			#{user_id},
			now(),
			now()
		);
	</insert>
	
	<delete id="deleteArticleLike" parameterType="com.remember.app.entity.community.article.ArticleLike">
		delete from
			article_like
		where
			article_id = #{article_id} and user_id = #{user_id};
	</delete>
	
	<insert id="insertArticleComment" parameterType="com.remember.app.entity.community.article.Comment">
		insert into
			article_comment_mst
		values(
			0,
			#{article_id},
			#{user_id},
			#{contents},
			#{use_nickname},
			null,
			now(),
			now(),
			false,
			null
		);
	</insert>
	
	<insert id="insertRelatedArticleComment" parameterType="com.remember.app.entity.community.article.Comment">
		insert into
			article_comment_mst
		values(
			0,
			#{article_id},
			#{user_id},
			#{contents},
			#{use_nickname},
			#{related_comment_id},
			now(),
			now(),
			false,
			null
		);
	</insert>
	
	<update id="updateArticleComment" parameterType="com.remember.app.entity.community.article.Comment">
		update
			article_comment_mst
		set
			contents = #{contents},
			use_nickname = #{use_nickname},
			update_date = now()
		where
			id = #{id} and
			article_id = #{article_id} and
			user_id = #{user_id};
	</update>
	
	<update id="deleteArticleComment" parameterType="com.remember.app.entity.community.article.Comment">
		update
			article_comment_mst
		set
			deleted = true,
			deleted_date = now()
		where
			id = #{id} and
			article_id = #{article_id} and
			user_id = #{user_id};
	</update>
	
	<insert id="insertArticleCommentLike" parameterType="com.remember.app.entity.community.article.CommentLike">
		insert into
			article_comment_like
		values(
			0,
			#{comment_id},
			#{user_id},
			now(),
			now()
		);
	</insert>
	
	<delete id="deleteArticleCommentLike" parameterType="com.remember.app.entity.community.article.CommentLike">
		delete from
			article_comment_like
		where
			comment_id = #{comment_id} and
			user_id = #{user_id};
	</delete>
	
	<update id="updateArticleViewCount">
		update
			article_mst
		set
			view_count = view_count + 1
		where
			id = #{articleId};
	</update>

</mapper>